generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         String        @default("user")
  groups       GroupUser[]
  events       EventUser[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
}

model Event {
  id              String        @id @default(uuid())
  name            String
  date            DateTime
  location        String
  users           EventUser[]
  group           Group?
  maxParticipants Int           @default(10)
  reservations    Reservation[]
}

model EventUser {
  id      String @id @default(uuid())
  userId  String
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  @@unique([eventId, userId])
}

model Group {
  id        String      @id @default(uuid())
  eventId   String      @unique
  event     Event       @relation(fields: [eventId], references: [id])
  members   GroupUser[]
  points    Int         @default(0)
  createdAt DateTime    @default(now())
}

model GroupUser {
  id      String @id @default(uuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Reservation {
  id        String            @id @default(uuid())
  userId    String
  eventId   String
  date      DateTime
  status    ReservationStatus @default(PENDING)
  createdAt DateTime          @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}
